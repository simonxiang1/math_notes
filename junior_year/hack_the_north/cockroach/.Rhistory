print(sd(quakes$lat[quakes$depth > median(quakes$depth)]))
print(sd(quakes$lat[quakes$depth > median(quakes$depth)]))
print(sd(quakes$lat[quakes$depth < median(quakes$depth)]))
print(sd(iris$Petal.Length))
print(sd(iris$Petal.Width))
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth_m)
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth)
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth_m)
boxplot(quakes$depth)
# your code here
boxplot(quakes$depth)
hist(quakes$depth)
plot(quakes$stations, quakes$mag)
help(quakes)
plot(quakes$stations, quakes$mag)
plot(quakes$stations, quakes$mag)
## DO NOT DELETE OR MODIFY THIS CHUNK: IT MUST BE PRESENT TO RECEIVE CREDIT FOR THE ASSIGNMENT
sessionInfo(); Sys.time(); Sys.info()
#DO NOT EDIT THIS CHUNK OR ANYTHING ABOVE IT!
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F, tidy=T, tidy.opts=list(width.cutoff=50))
plot(quakes$long, quakes$lat)
1+2
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} elseif (p_1 > p_2) {
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} elif (p_1 > p_2) {
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
war <- function () {
p_1 <- sample(c(1,2,3),1)
#print(p_1)
p_2 <- sample(c(1,2,3),1)
#print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
war <- function () {
p_1 <- sample(c(1,2,3),1)
#print(p_1)
p_2 <- sample(c(1,2,3),1)
#print(p_2)
if (p_1 == p_2) {
return("tie")
} else if (p_1 > p_2) {
return("one")
} else {
return("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
sum(many.wars == "tie") / nsim
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(5, size = 1, prob = 0.5)
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(1, size = 2, prob = 0.5)
dbinom(5, size = 1, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
qbinom(0.25, size = 2, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
qbinom(0.25, size = 2, prob = 0.5)
qbinom(0.10, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
means(sims == 2)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new.sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, break = 25) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, breaks = 25) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, breaks = seq(-0.5, 20.5, 1)) #making histograms
# option 1
plot(co2)
# Count the number of characters in a string
nchar(school)
school <- "UT Austin"
# Count the number of characters in a string
nchar(school)
school <- "UT Austin"
# Count the number of characters in a string
nchar(school)
match <- list(c(6,4),c(5,7),c(6,3))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
match <- list(c(6,4),c(5,7),c(6,6))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
match <- list(c(6,4),c(5,7),c(6,3))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(6,4),c(5,7),c(6,3))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(3,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(3,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(7,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(1,6),c(1,6),c(7,6))
Awinner(match)
knitr::opts_chunk$set(
collapse = TRUE,
fig.align="center",
fig.pos="t",
fig.width=12,
strip.white = TRUE
)
sims=rbinom(100, size=1, prob=0.2)
sums(sims)/100
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(10000, size=1, prob=0.2)
sum(sims)/10000
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1))
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts")
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque")
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque", prob=TRUE)
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque", #prob=TRUE
)
library(ggplot2)
data(diamonds)
diamonds <- as.data.frame(diamonds)
str
str(diamonds)
ls.str(diamonds)
head(diamonds)
help(diamonds)
?diamonds
ggplot(data = diamonds, aes(x = diamonds$carat, y = diamonds$price)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm")
?diamonds
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_y_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_x_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10()
library(ggthemes)
library(ggthemes)
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_fivethirtyeight()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_fivethirtyeight()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_fivethirtyeight()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_classic() + labs(color = "Clarity")
ggplot(data = diamonds, aes(x = depth, y = price, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_classic() + labs(color = "Clarity")
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(data = diamonds, aes(x = carat, y = volume, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_classic() + labs(color = "Clarity")
ggplot(data = diamonds, aes(x = carat, y = volume, color = clarity)) + geom_point() + geom_smooth(method = "lm") + scale_x_log10() + theme_classic() + labs(color = "Clarity")
?diamonds
ggplot(data = diamonds, aes(x = depth, y = price, color = carat)) + geom_point() + geom_smooth(method = "lm") + scale_y_log10() + scale_x_log10() + theme_classic() + labs(color = "Clarity")
ggplot(data = diamonds, aes(x = depth, y = price, color = carat)) + geom_point() + geom_smooth(method = "lm")  + theme_classic() + labs(color = "Clarity")
setwd("/home/simon/Desktop/academic/ut_austin/hack_the_north
")
setwd("/home/simon/Desktop/academic/ut_austin/hack_the_north")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
print("hello world")
reticulate::repl_python()
b
n
