mean(quakes$mag)
median(quakes$mag)
min(quakes$depth)
max(quakes$depth)
mean(quakes$depth)
median(quakes$depth)
mean(quakes$mag[quakes$depth > median(quakes$depth)])
mean(quakes$mag[quakes$depth > median(quakes$depth)])
mean(quakes$mag[quakes$depth < median(quakes$depth)])
hist(iris$Petal.Length)
hist(iris$Petal.Width)
print(sd(iris$Petal.Length))
print(sd(iris$Petal.Width))
print("ok")
print(sd(quakes$lat[quakes$depth > med(quakes$depth)]))
print(sd(quakes$lat[quakes$depth > median(quakes$depth)]))
print(sd(quakes$lat[quakes$depth > median(quakes$depth)]))
print(sd(quakes$lat[quakes$depth < median(quakes$depth)]))
print(sd(iris$Petal.Length))
print(sd(iris$Petal.Width))
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth_m)
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth)
# update the code below by replacing the NA with the correct expression to convert to meters
quakes$depth_m <- quakes$depth * 1000
head(quakes$depth_m)
boxplot(quakes$depth)
# your code here
boxplot(quakes$depth)
hist(quakes$depth)
plot(quakes$stations, quakes$mag)
help(quakes)
plot(quakes$stations, quakes$mag)
plot(quakes$stations, quakes$mag)
## DO NOT DELETE OR MODIFY THIS CHUNK: IT MUST BE PRESENT TO RECEIVE CREDIT FOR THE ASSIGNMENT
sessionInfo(); Sys.time(); Sys.info()
#DO NOT EDIT THIS CHUNK OR ANYTHING ABOVE IT!
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F, tidy=T, tidy.opts=list(width.cutoff=50))
plot(quakes$long, quakes$lat)
1+2
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
p_1
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} elseif (p_1 > p_2) {
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} elif (p_1 > p_2) {
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
war <- function () {
p_1 <- sample(c(1,2,3),1)
print(p_1)
p_2 <- sample(c(1,2,3),1)
print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
war <- function () {
p_1 <- sample(c(1,2,3),1)
#print(p_1)
p_2 <- sample(c(1,2,3),1)
#print(p_2)
if (p_1 == p_2) {
print("tie")
} else if (p_1 > p_2) {
print("one")
} else {
print("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
war <- function () {
p_1 <- sample(c(1,2,3),1)
#print(p_1)
p_2 <- sample(c(1,2,3),1)
#print(p_2)
if (p_1 == p_2) {
return("tie")
} else if (p_1 > p_2) {
return("one")
} else {
return("two")
}
}
war()
nsim = 1000
many.wars = replicate(nsim, war())
many.wars == "tie"
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
sum(many.wars == "tie") / nsim
nsim = 1000
many.wars = replicate(nsim, war())
sum(many.wars == "tie") / nsim
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(5, size = 1, prob = 0.5)
dbinom(0, size = 1, prob = 0.5)
dbinom(1, size = 1, prob = 0.5)
dbinom(1, size = 2, prob = 0.5)
dbinom(5, size = 1, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
qbinom(0.25, size = 2, prob = 0.5)
pbinom(1, 2, 0.5)
qbinom(0.75, size = 2, prob = 0.5)
qbinom(0.25, size = 2, prob = 0.5)
qbinom(0.10, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
means(sims == 2)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new.sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, break = 25) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, breaks = 25) #making histograms
rbinom(1, size = 2, prob = 0.5)
sims = rbinom(nsim, size = 2, prob = 0.5)
#sims
mean(sims == 2)
new_sims = rbinom(nsim, size = 20, prob = 0.4)
hist(new_sims, breaks = seq(-0.5, 20.5, 1)) #making histograms
# option 1
plot(co2)
# Count the number of characters in a string
nchar(school)
school <- "UT Austin"
# Count the number of characters in a string
nchar(school)
school <- "UT Austin"
# Count the number of characters in a string
nchar(school)
match <- list(c(6,4),c(5,7),c(6,3))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
match <- list(c(6,4),c(5,7),c(6,6))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
match <- list(c(6,4),c(5,7),c(6,3))
sets <- 0
for (set in match) {
if (set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
sets
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(6,4),c(5,7),c(6,3))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets > 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(3,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(3,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(7,6),c(7,6),c(7,6))
Awinner(match)
Awinner <- function(list){
sets <- 0
for(set in list) {
if(set[1] > set[2]) {
sets <- sets + 1
} else {
sets <- sets
}
}
if(sets >= 2) {
print("Player A wins")
} else {
print("Player A does not win")
}
}
match <- list(c(1,6),c(1,6),c(7,6))
Awinner(match)
knitr::opts_chunk$set(
collapse = TRUE,
fig.align="center",
fig.pos="t",
fig.width=12,
strip.white = TRUE
)
sims=rbinom(100, size=1, prob=0.2)
sums(sims)/100
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims=rbinom(10000, size=1, prob=0.2)
sum(sims)/10000
mean(sims)
sims=rbinom(100, size=1, prob=0.2)
sum(sims)/100
mean(sims)
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1))
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts")
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque")
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque", prob=TRUE)
sims.bin=rbinom(1000, size=100, prob=0.2)
hist(sims.bin, breaks=seq(-0.5, 100.5, 1), main="Histogram of my simulated values", xlab="My simulated values", ylab="Counts", col="bisque", #prob=TRUE
)
pwd
setwd("/home/simon/Desktop/academic/ut_austin/junior_year/statistics/rmd_files")
titanic <- read.csv("../projects/titanic/titanic.csv")
titanic <- read.csv("../projects/titanic/titanic.csv")
titanic <- read.csv("../projects/titanic/titanic.csv")
ls.str(titanic)
prop.alive = count.alive / length(titanic$survived)
alive <- titanic$survived
count.alive <- sum(alive)
prop.alive = count.alive / length(titanic$survived)
prop.alive
age <- titanic$age
par(mfrow=c(1,2)) # two graphs side by side
hist(age, break = 25)
age <- titanic$age
par(mfrow=c(1,2)) # two graphs side by side
hist(age, breaks = 25)
hist(age[titanic$survived = 1], breaks = 25,
age <- titanic$age
par(mfrow=c(1,2)) # two graphs side by side
hist(age, breaks = 25)
hist(age[titanic$survived == 1], breaks = 25,
ylim = c(0,200),
main = "Histogram of age(survivors)",
xlab = "age (survivors)"
age <- titanic$age
par(mfrow=c(1,2)) # two graphs side by side
hist(age, breaks = 25)
hist(age[titanic$survived == 1], breaks = 25,
ylim = c(0,200),
main = "Histogram of age(survivors)",
xlab = "age (survivors)")
